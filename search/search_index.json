{
    "docs": [
        {
            "location": "/",
            "text": "b-captain-hook\n\n\nCaptain hook is a Python WSGI appication that handles webhooks from gitea and\ngithub.\n\n\nForked from \ncarlos-jenkins/python-github-webhooks\n.\n\n\nTo install captain hook:\n\n\ngit clone https://git.charlesreid1.com/bots/b-captain-hook.git\ncd b-captain-hook\npip install -r requirements.txt\n\n\n\n\nNow run it:\n\n\npython captain_hook.py\n\n\n\n\nWhat is Captain Hook?\n\n\nCaptain Hook is a flask webhook server that runs via docker.\n\n\nSee \nWhat is Captain Hook?\n for an explanation.\n\n\nConfiguring Captain Hook\n\n\nCaptain Hook requires a config file. See \nconfig.example.json\n in this \ndirectory, and the \nCaptain Hook Config\n page.\n\n\nStarting Captain Hook\n\n\nSee \nStarting Captain Hook\n for how to set up the various startup services\nand docker pods that are required to run Captain Hook.\n\n\nAdding Hooks\n\n\nCaptain Hook accepts incoming webhooks and checks for scripts in \nhooks/\n\nthat match the action performed on the given repository.\n\n\nA webhook script is anything that is executable.\n\n\nTo add a new script to be triggered on a particular webhook,\nput it in the \nhooks/\n directory and follow the naming convention:\n\n\nb-captain-hook/\n        hooks/{event}-{name}-{branch}\n        hooks/{event}-{name}\n        hooks/{event}\n        hooks/all\n\n\n\n\nFor example, suppose I performed a \npush\n action to a repository\nnamed \nhappy-giraffe\n, and I was pushing commits to the \ngh-pages\n\nbranch. Then the webhook sent to Captain Hook would contain this\ninformation, and Captain Hook would only look for the following\nscripts, and run them if present:\n\n\nb-captain-hook/\n        hooks/push-happy-giraffe-gh-pages\n        hooks/push-happy-giraffe\n        hooks/push\n        hooks/all\n\n\n\n\nThe application passes the path to a JSON file, while holding the payload\nfor the request as the first argument. Suppose we had an event where someone\npushed to the \nhappy-giraffe\n repository, to the \ngh-pages\n branch. \n\n\nThe application will pass in two pieces of information:\n\n\n\n\n\n\nPath to JSON file holding payload - the first part of the request\n  is a JSON file that holds the payload for the request.\n\n\n\n\n\n\nThe other piece of information passed is the name of the action\n    (e.g., \npush\n)\n\n\n\n\n\n\nThe application will pass to the hooks the path to a JSON file holding the\npayload for the request as first argument. The event type will be passed\nas second argument. For example:\n\n\n    hooks/push-happy-giraffe-master /tmp/sXFHji push\n\n\n\n\nHooks can be written in any scripting language as long as the file is\nexecutable and has a shebang. A simple example in Python could be:\n\n\n    #!/usr/bin/env python\n    # Python Example for Python GitHub Webhooks\n    # File: push-happy-giraffe-master\n\n    import sys\n    import json\n\n    with open(sys.argv[1], 'r') as jsf:\n      payload = json.loads(jsf.read())\n\n    ### Do something with the payload\n    name = payload['repository']['name']\n    outfile = '/tmp/hook-{}.log'.format(name)\n\n    with open(outfile, 'w') as f:\n        f.write(json.dumps(payload))\n\n\n\n\nNot all events have an associated branch, so a branch-specific hook cannot\nfire for such events. For events that contain a \npull_request\n object, the\nbase branch (target for the pull request) is used, not the head branch.\n\n\nThe payload structure depends on the event type. Please review:\n\n\n    https://developer.github.com/v3/activity/events/types/\n\n\n\n\nDocker Deployment\n\n\nDockerfile\n defines the image, but use the \ndocker-compose.yml\n file instead.\n\n\nTo build, start, and stop:\n\n\ndocker-compose build --no-cache\ndocker-compose up\ndocker-compose down\n\n\n\n\nPorts\n\n\nThis binds to external port 5000. \n\n\nImplementing a secret key is critical to keep \ncaptain hook from deploying random strangers' \nwebhook requests.\n\n\nIn our case, the hook is reverse-proxied by nginx on krash,\nso we know what IP to expect. \n\n\n(Problems implementing IP checking - 172 subrange, not 45 subrange.)\n\n\nMore important than validating the IP is validating the secret.\n\n\nVolumes\n\n\nTHe docker container mounts the \nhooks/\n directory\nin this repository to \n/app/hooks\n in the container.\n\n\n./hooks:/app/hooks\n\n\n\n\nNOTE: These scripts must be made executable with \nchmod +x\n\nor the webhook server will not do anything and be totally silent.\n\n\nThe docker container will also mount \n/www/\n into the container,\nso all the static web content on the host (blackbeard) \nis available to the webhooks to perform updates and etc.\n\n\n/www\n is mounted to the same place on the host and in the container:\n\n\n/www:/www\n\n\n\n\nTesting\n\n\nTo test, you can trigger the webhook from the \nrepository's webhooks panel.\n\n\nKeep in mind this will \nonly\n fire triggers\non the master branch.\n\n\nDebugging\n\n\nThis container is an absolute pain in the ass to debug, \nand uses python 2 to boot. \n\n\nBut it was the only thing working.\n\n\nTo test: \n\n\n\n\nRun the server in one window\n\n\nIn a second window, open a shell in the container and monitor \n/tmp/*.log\n\n\nIn a third window, open a shell in the container and monitor \n/www/*\n\n\n\n\nTo open a shell in the container:\n\n\ndocker exec -it <name-of-container> /bin/sh\n\n\n\n\nRemember you only have \n/bin/sh\n and \npython2\n,\nno \nbash\n and no \npython3\n.\n\n\nTo check logs:\n\n\ndocker logs -f <container-name>\n\n\n\n\nYou can also run the container without sending it\nto the background,\n\n\ndocker-compose up\n\n\n\n\nand this will show exceptions on the screen\n(but it won't show anything else useful...)\n\n\nLicenses\n\n\nOriginal license (Charles Reid) and forked license\n(Carlos Jenkins) given in \nlicense.md\n\n\nCredits\n\n\nThis project is just the reinterpretation and merge of two approaches:\n\n\ngithub-webhook-wrapper\n\n\nflask-github-webhook\n\n\nIt is implemented with the help of python 3 alpine:\n\n\nnikos/python3-alpine-flask-docker",
            "title": "Home"
        },
        {
            "location": "/#b-captain-hook",
            "text": "Captain hook is a Python WSGI appication that handles webhooks from gitea and\ngithub.  Forked from  carlos-jenkins/python-github-webhooks .  To install captain hook:  git clone https://git.charlesreid1.com/bots/b-captain-hook.git\ncd b-captain-hook\npip install -r requirements.txt  Now run it:  python captain_hook.py",
            "title": "b-captain-hook"
        },
        {
            "location": "/#what-is-captain-hook",
            "text": "Captain Hook is a flask webhook server that runs via docker.  See  What is Captain Hook?  for an explanation.",
            "title": "What is Captain Hook?"
        },
        {
            "location": "/#configuring-captain-hook",
            "text": "Captain Hook requires a config file. See  config.example.json  in this \ndirectory, and the  Captain Hook Config  page.",
            "title": "Configuring Captain Hook"
        },
        {
            "location": "/#starting-captain-hook",
            "text": "See  Starting Captain Hook  for how to set up the various startup services\nand docker pods that are required to run Captain Hook.",
            "title": "Starting Captain Hook"
        },
        {
            "location": "/#adding-hooks",
            "text": "Captain Hook accepts incoming webhooks and checks for scripts in  hooks/ \nthat match the action performed on the given repository.  A webhook script is anything that is executable.  To add a new script to be triggered on a particular webhook,\nput it in the  hooks/  directory and follow the naming convention:  b-captain-hook/\n        hooks/{event}-{name}-{branch}\n        hooks/{event}-{name}\n        hooks/{event}\n        hooks/all  For example, suppose I performed a  push  action to a repository\nnamed  happy-giraffe , and I was pushing commits to the  gh-pages \nbranch. Then the webhook sent to Captain Hook would contain this\ninformation, and Captain Hook would only look for the following\nscripts, and run them if present:  b-captain-hook/\n        hooks/push-happy-giraffe-gh-pages\n        hooks/push-happy-giraffe\n        hooks/push\n        hooks/all  The application passes the path to a JSON file, while holding the payload\nfor the request as the first argument. Suppose we had an event where someone\npushed to the  happy-giraffe  repository, to the  gh-pages  branch.   The application will pass in two pieces of information:    Path to JSON file holding payload - the first part of the request\n  is a JSON file that holds the payload for the request.    The other piece of information passed is the name of the action\n    (e.g.,  push )    The application will pass to the hooks the path to a JSON file holding the\npayload for the request as first argument. The event type will be passed\nas second argument. For example:      hooks/push-happy-giraffe-master /tmp/sXFHji push  Hooks can be written in any scripting language as long as the file is\nexecutable and has a shebang. A simple example in Python could be:      #!/usr/bin/env python\n    # Python Example for Python GitHub Webhooks\n    # File: push-happy-giraffe-master\n\n    import sys\n    import json\n\n    with open(sys.argv[1], 'r') as jsf:\n      payload = json.loads(jsf.read())\n\n    ### Do something with the payload\n    name = payload['repository']['name']\n    outfile = '/tmp/hook-{}.log'.format(name)\n\n    with open(outfile, 'w') as f:\n        f.write(json.dumps(payload))  Not all events have an associated branch, so a branch-specific hook cannot\nfire for such events. For events that contain a  pull_request  object, the\nbase branch (target for the pull request) is used, not the head branch.  The payload structure depends on the event type. Please review:      https://developer.github.com/v3/activity/events/types/",
            "title": "Adding Hooks"
        },
        {
            "location": "/#docker-deployment",
            "text": "Dockerfile  defines the image, but use the  docker-compose.yml  file instead.  To build, start, and stop:  docker-compose build --no-cache\ndocker-compose up\ndocker-compose down",
            "title": "Docker Deployment"
        },
        {
            "location": "/#ports",
            "text": "This binds to external port 5000.   Implementing a secret key is critical to keep \ncaptain hook from deploying random strangers' \nwebhook requests.  In our case, the hook is reverse-proxied by nginx on krash,\nso we know what IP to expect.   (Problems implementing IP checking - 172 subrange, not 45 subrange.)  More important than validating the IP is validating the secret.",
            "title": "Ports"
        },
        {
            "location": "/#volumes",
            "text": "THe docker container mounts the  hooks/  directory\nin this repository to  /app/hooks  in the container.  ./hooks:/app/hooks  NOTE: These scripts must be made executable with  chmod +x \nor the webhook server will not do anything and be totally silent.  The docker container will also mount  /www/  into the container,\nso all the static web content on the host (blackbeard) \nis available to the webhooks to perform updates and etc.  /www  is mounted to the same place on the host and in the container:  /www:/www",
            "title": "Volumes"
        },
        {
            "location": "/#testing",
            "text": "To test, you can trigger the webhook from the \nrepository's webhooks panel.  Keep in mind this will  only  fire triggers\non the master branch.",
            "title": "Testing"
        },
        {
            "location": "/#debugging",
            "text": "This container is an absolute pain in the ass to debug, \nand uses python 2 to boot.   But it was the only thing working.  To test:    Run the server in one window  In a second window, open a shell in the container and monitor  /tmp/*.log  In a third window, open a shell in the container and monitor  /www/*   To open a shell in the container:  docker exec -it <name-of-container> /bin/sh  Remember you only have  /bin/sh  and  python2 ,\nno  bash  and no  python3 .  To check logs:  docker logs -f <container-name>  You can also run the container without sending it\nto the background,  docker-compose up  and this will show exceptions on the screen\n(but it won't show anything else useful...)",
            "title": "Debugging"
        },
        {
            "location": "/#licenses",
            "text": "Original license (Charles Reid) and forked license\n(Carlos Jenkins) given in  license.md",
            "title": "Licenses"
        },
        {
            "location": "/#credits",
            "text": "This project is just the reinterpretation and merge of two approaches:  github-webhook-wrapper  flask-github-webhook  It is implemented with the help of python 3 alpine:  nikos/python3-alpine-flask-docker",
            "title": "Credits"
        },
        {
            "location": "/starting/",
            "text": "Starting Captain Hook\n\n\nNOTE: Captain Hook can be run by itself, but is designed to run\nas part of the \npod-webhooks\n\ndocker pod. Instructions below are not guaranteed to work outside of\nthe docker pod.\n\n\nCaptain Hook Docker \"Pod\"\n\n\nTo run Captain Hook, we utilize a Docker compose file\nto run the container that runs Captain Hook and mounts the\ncorrect directories in the correct locations.\n\n\nSee \ndocker-compose.yml\n\nin the Captain Hook repository.\n\n\nThis is a one-container pod.\n\n\nTo start/stop/build it,\n\n\ndocker-compose up -d   # start in background\ndocker-compose down\ndocker-compose build\n\n\n\n\nTo rebuild from scratch,\n\n\ndocker-compose build --no-cache\n\n\n\n\nStartup Service: Captain Hook Docker Pod\n\n\nIn order to start the Captain Hook docker pod automatically\nat startup, and automatically restart the pod if it crashes or\nis stopped, we install a startup service called \ndockerpod-captainhook\n:\n\n\n[Unit]\nDescription=captain hook webhook server docker pod\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/bots/b-captain-hook/docker-compose.yml up\nExecStop=/usr/local/bin/docker-compose  -f /home/charles/codes/bots/b-captain-hook/docker-compose.yml down\n\n[Install]\nWantedBy=default.target\n\n\n\n\nThis startup service runs \ndocker-compose\n with the \n-f\n flag to specify\nan absolute path to the Captain Hook \ndocker-compose.yml\n file.\n\n\nStartup Service: Captain Hook Canary\n\n\nCaptain Hook listens for incoming web hooks and (optionally) runs a script in the \nhooks/\n\nfolder, based on the type of action, the name of the repository, and the\nname of the branch.\n\n\nHowever, there is one tricky task: Captain Hook must be able update \nitself\n\nwhen there are changes pushed to the Captain Hook repository.\n\n\nTo resolve this, we run a \"canary\" startup service for Captain Hook.\nThis canary startup service runs a shell script that checks (every 10 seconds)\nfor the presence of a file at \n/tmp/triggers/\n.  If this file is present, the\nhost copy of Captain Hook is updated, the Captain Hook docker pod is restarted,\nand the trigger file is removed.\n\n\nThis allows webhooks received by Captain Hook (which occur \ninside\n of a Docker\ncontainer) to trigger an event on the host machine by bind-mounting\n\n/tmp/triggers/\n and adding a file to this directory.\n\n\ncaptain-hook-canary.service\n:\n\n\n[Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target\n\n\n\n\nAlso see \ncaptain-hook-canary.service\n\nin \nhttps://git.charlesreid1.com/dotfiles/debian\n.\n\n\nThis script calls the Captain Hook canary script, which is given below:\n\n\ncaptain_hook_canary.sh\n:\n\n\n#!/bin/bash\n\n: '\nCaptain Hook Canary Script\n\n\nNote: this needs an associated systemd service.\nSee the services directory of the dotfiles repo.\n\n(snip comments)\n'\n\nwhile true\ndo\n    # bootstrap-pull captain hook\n    if [ -f \"/tmp/triggers/push-b-captain-hook-master\" ]; then\n        echo \"CAPTAIN HOOK'S CANARY:\"\n        echo \"Running trigger to update Captain Hook on the host machine (user charles)\"\n        sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py\n        echo \"All done.\"\n        rm -f \"/tmp/triggers/push-b-captain-hook-master\"\n    fi\n\n    sleep 10;\ndone\n\n\n\n\nAlso see \ncaptain_hook_canary.sh\n\nin the \ndotfiles/blackbeard_scripts\n folder of\n\nhttps://git.charlesreid1.com/dotfiles/debian\n.\n\n\nWhen this canary script for Captain Hook is triggered by the presence of\na file at \n/tmp/triggers/push-b-captain-hook-master\n (which is mounted\ninside the container at th same location as outside the container), it will\nrun a script to pull Captain Hook:\n\n\ncaptain_hook_pull_host.py\n:\n\n\n#!/usr/bin/env python3\nimport subprocess\nimport os\nimport time\n\n\"\"\"\nCaptain Hook: Pull Captain Hook on the Host \n\nThis script is called by the host machine \n(blackbeard) running the Captain Hook container.\n\nThis is triggered by push actions to the \nmaster branch of b-captain-hook.\n\nThe action is to update (git pull) the copy \nof captain hook running on the host, and\nrestart the container pod.\n\"\"\"\n\nwork_dir = os.path.join('/home','charles','codes','bots','b-captain-hook')\n\n# Step 1:\n# Update Captain Hook\npull_cmd = ['git','pull','origin','master']\nsubprocess.call(pull_cmd, cwd=work_dir)\n\ntime.sleep(5)\n\n# Step 2:\n# Restart Captain Hook pod\npod_restart = ['docker-compose','restart']\nsubprocess.call(pod_restart, cwd=work_dir)",
            "title": "Getting Started"
        },
        {
            "location": "/starting/#starting-captain-hook",
            "text": "NOTE: Captain Hook can be run by itself, but is designed to run\nas part of the  pod-webhooks \ndocker pod. Instructions below are not guaranteed to work outside of\nthe docker pod.",
            "title": "Starting Captain Hook"
        },
        {
            "location": "/starting/#captain-hook-docker-pod",
            "text": "To run Captain Hook, we utilize a Docker compose file\nto run the container that runs Captain Hook and mounts the\ncorrect directories in the correct locations.  See  docker-compose.yml \nin the Captain Hook repository.  This is a one-container pod.  To start/stop/build it,  docker-compose up -d   # start in background\ndocker-compose down\ndocker-compose build  To rebuild from scratch,  docker-compose build --no-cache",
            "title": "Captain Hook Docker \"Pod\""
        },
        {
            "location": "/starting/#startup-service-captain-hook-docker-pod",
            "text": "In order to start the Captain Hook docker pod automatically\nat startup, and automatically restart the pod if it crashes or\nis stopped, we install a startup service called  dockerpod-captainhook :  [Unit]\nDescription=captain hook webhook server docker pod\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/bots/b-captain-hook/docker-compose.yml up\nExecStop=/usr/local/bin/docker-compose  -f /home/charles/codes/bots/b-captain-hook/docker-compose.yml down\n\n[Install]\nWantedBy=default.target  This startup service runs  docker-compose  with the  -f  flag to specify\nan absolute path to the Captain Hook  docker-compose.yml  file.",
            "title": "Startup Service: Captain Hook Docker Pod"
        },
        {
            "location": "/starting/#startup-service-captain-hook-canary",
            "text": "Captain Hook listens for incoming web hooks and (optionally) runs a script in the  hooks/ \nfolder, based on the type of action, the name of the repository, and the\nname of the branch.  However, there is one tricky task: Captain Hook must be able update  itself \nwhen there are changes pushed to the Captain Hook repository.  To resolve this, we run a \"canary\" startup service for Captain Hook.\nThis canary startup service runs a shell script that checks (every 10 seconds)\nfor the presence of a file at  /tmp/triggers/ .  If this file is present, the\nhost copy of Captain Hook is updated, the Captain Hook docker pod is restarted,\nand the trigger file is removed.  This allows webhooks received by Captain Hook (which occur  inside  of a Docker\ncontainer) to trigger an event on the host machine by bind-mounting /tmp/triggers/  and adding a file to this directory.  captain-hook-canary.service :  [Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target  Also see  captain-hook-canary.service \nin  https://git.charlesreid1.com/dotfiles/debian .  This script calls the Captain Hook canary script, which is given below:  captain_hook_canary.sh :  #!/bin/bash\n\n: '\nCaptain Hook Canary Script\n\n\nNote: this needs an associated systemd service.\nSee the services directory of the dotfiles repo.\n\n(snip comments)\n'\n\nwhile true\ndo\n    # bootstrap-pull captain hook\n    if [ -f \"/tmp/triggers/push-b-captain-hook-master\" ]; then\n        echo \"CAPTAIN HOOK'S CANARY:\"\n        echo \"Running trigger to update Captain Hook on the host machine (user charles)\"\n        sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py\n        echo \"All done.\"\n        rm -f \"/tmp/triggers/push-b-captain-hook-master\"\n    fi\n\n    sleep 10;\ndone  Also see  captain_hook_canary.sh \nin the  dotfiles/blackbeard_scripts  folder of https://git.charlesreid1.com/dotfiles/debian .  When this canary script for Captain Hook is triggered by the presence of\na file at  /tmp/triggers/push-b-captain-hook-master  (which is mounted\ninside the container at th same location as outside the container), it will\nrun a script to pull Captain Hook:  captain_hook_pull_host.py :  #!/usr/bin/env python3\nimport subprocess\nimport os\nimport time\n\n\"\"\"\nCaptain Hook: Pull Captain Hook on the Host \n\nThis script is called by the host machine \n(blackbeard) running the Captain Hook container.\n\nThis is triggered by push actions to the \nmaster branch of b-captain-hook.\n\nThe action is to update (git pull) the copy \nof captain hook running on the host, and\nrestart the container pod.\n\"\"\"\n\nwork_dir = os.path.join('/home','charles','codes','bots','b-captain-hook')\n\n# Step 1:\n# Update Captain Hook\npull_cmd = ['git','pull','origin','master']\nsubprocess.call(pull_cmd, cwd=work_dir)\n\ntime.sleep(5)\n\n# Step 2:\n# Restart Captain Hook pod\npod_restart = ['docker-compose','restart']\nsubprocess.call(pod_restart, cwd=work_dir)",
            "title": "Startup Service: Captain Hook Canary"
        },
        {
            "location": "/what/",
            "text": "What is Captain Hook?\n\n\nThe Short Version\n\n\nCaptain Hook enables a Github Pages-like push-to-deploy setup for git.charlesreid1.com.\n\n\nInstalling webhooks into repositories on \nhttps://git.charlesreid1.com\n\nallows the \ngh-pages\n branch of the given repository to be hosted live on\n\nhttps://pages.charlesreid1.com\n.\n\n\nThe Long Version\n\n\nCaptain Hook is a Python Flask server that listens for incoming web hooks from\nGitea (or Github), and uses those web hooks to deply pages to \nhttps://pages.charlesreid1.com\n.\n\n\nCaptain Hook works by providing a webhook endpoint (rounting provided by nginx\ncontainer in \npod-charlesreid1\n)\nthat can be used to link a Gitea (or Github) repository to Captain Hook.\n\n\nGitea (and Github) send payloads with webhooks that specify information like the\naction that triggered the webhook, and the repository/branch on which the\naction was performed.\n\n\nCaptain Hook runs inside of a docker container. The docker container mounts the\npages.charlesreid1.com web directory inside the container. Generally the hook\nscripts will deploy the \ngh-apges\n branch to this web directory.",
            "title": "What is Captain Hook?"
        },
        {
            "location": "/what/#what-is-captain-hook",
            "text": "",
            "title": "What is Captain Hook?"
        },
        {
            "location": "/what/#the-short-version",
            "text": "Captain Hook enables a Github Pages-like push-to-deploy setup for git.charlesreid1.com.  Installing webhooks into repositories on  https://git.charlesreid1.com \nallows the  gh-pages  branch of the given repository to be hosted live on https://pages.charlesreid1.com .",
            "title": "The Short Version"
        },
        {
            "location": "/what/#the-long-version",
            "text": "Captain Hook is a Python Flask server that listens for incoming web hooks from\nGitea (or Github), and uses those web hooks to deply pages to  https://pages.charlesreid1.com .  Captain Hook works by providing a webhook endpoint (rounting provided by nginx\ncontainer in  pod-charlesreid1 )\nthat can be used to link a Gitea (or Github) repository to Captain Hook.  Gitea (and Github) send payloads with webhooks that specify information like the\naction that triggered the webhook, and the repository/branch on which the\naction was performed.  Captain Hook runs inside of a docker container. The docker container mounts the\npages.charlesreid1.com web directory inside the container. Generally the hook\nscripts will deploy the  gh-apges  branch to this web directory.",
            "title": "The Long Version"
        },
        {
            "location": "/config/",
            "text": "Captain Hook Config\n\n\nConfig file \nconfig.json\n should contain:\n\n\n{\n    \"whitelist_ips\": true,\n    \"enforce_secret\": \"SOMELONGSECRETSTRINGTHATYOUPASTEINTOGITHUBORGITEAWEBINTERFACE\",\n    \"return_scripts_info\": true,\n    \"hooks_path\": \"/hooks\"\n}\n\n\n\n\nenforce_secret\n - require \nX-Hub-Signature\n in header. Not enforced if empty.\n\n\nreturn_scripts_info\n - return a JSON with the \nstdout\n, \nstderr\n and exit\ncode for each executed hook using the hook name as key. If this option is set\nyou will be able to see the result of your hooks from within your GitHub\nhooks configuration page (see \"Recent Deliveries\").\n\n\nhooks_path\n - Configures a path to import the hooks. Example: \n/app/hooks",
            "title": "Configuring Captain Hook"
        },
        {
            "location": "/config/#captain-hook-config",
            "text": "Config file  config.json  should contain:  {\n    \"whitelist_ips\": true,\n    \"enforce_secret\": \"SOMELONGSECRETSTRINGTHATYOUPASTEINTOGITHUBORGITEAWEBINTERFACE\",\n    \"return_scripts_info\": true,\n    \"hooks_path\": \"/hooks\"\n}  enforce_secret  - require  X-Hub-Signature  in header. Not enforced if empty.  return_scripts_info  - return a JSON with the  stdout ,  stderr  and exit\ncode for each executed hook using the hook name as key. If this option is set\nyou will be able to see the result of your hooks from within your GitHub\nhooks configuration page (see \"Recent Deliveries\").  hooks_path  - Configures a path to import the hooks. Example:  /app/hooks",
            "title": "Captain Hook Config"
        },
        {
            "location": "/license/",
            "text": "License for Fork\n\n\nCopyright (c) 2018 Charles Reid\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\nLicense from Forked Repo\n\n\nCopyright (C) 2014-2015 Carlos Jenkins <carlos@jenkins.co.cr>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.",
            "title": "Captain Hook License"
        },
        {
            "location": "/license/#license-for-fork",
            "text": "Copyright (c) 2018 Charles Reid\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License for Fork"
        },
        {
            "location": "/license/#license-from-forked-repo",
            "text": "Copyright (C) 2014-2015 Carlos Jenkins <carlos@jenkins.co.cr>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.",
            "title": "License from Forked Repo"
        }
    ]
}