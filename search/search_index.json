{
    "docs": [
        {
            "location": "/",
            "text": "b-captain-hook\n\n\nCaptain hook is a Python WSGI appication\ntaht handles webhooks from gitea\nand github.\n\n\nForked from \ncarlos-jenkins/python-github-webhooks\n.\n\n\nTo install:\n\n\ngit clone https://github.com/carlos-jenkins/python-github-webhooks.git\ncd python-github-webhooks\n\n\n\n\nDependencies\n\n\nInstall dependencies with pip:\n\n\nsudo pip install -r requirements.txt\n\n\n\n\nSetup\n\n\nThis requires a config file. See \nconfig.json\n.\n\n\nenforce_secret\n - require \nX-Hub-Signature\n in header. Not enforced if empty.\n\n\nreturn_scripts_info\n - return a JSON with the \nstdout\n, \nstderr\n and exit\ncode for each executed hook using the hook name as key. If this option is set\nyou will be able to see the result of your hooks from within your GitHub\nhooks configuration page (see \"Recent Deliveries\").\n\n\nhooks_path\n - Configures a path to import the hooks. \n/hooks\n\n\nAdding Hooks\n\n\nThis application will execute scripts in the hooks directory using the\nfollowing order:\n\n\n(TODO: fix)\n\n\n    hooks/{event}-{name}-{branch}\n    hooks/{event}-{name}\n    hooks/{event}\n    hooks/all\n\n\n\n\nThe application will pass to the hooks the path to a JSON file holding the\npayload for the request as first argument. The event type will be passed\nas second argument. For example:\n\n\n    hooks/push-myrepo-master /tmp/sXFHji push\n\n\n\n\nHooks can be written in any scripting language as long as the file is\nexecutable and has a shebang. A simple example in Python could be:\n\n\n    #!/usr/bin/env python\n    # Python Example for Python GitHub Webhooks\n    # File: push-myrepo-master\n\n    import sys\n    import json\n\n    with open(sys.argv[1], 'r') as jsf:\n      payload = json.loads(jsf.read())\n\n    ### Do something with the payload\n    name = payload['repository']['name']\n    outfile = '/tmp/hook-{}.log'.format(name)\n\n    with open(outfile, 'w') as f:\n        f.write(json.dumps(payload))\n\n\n\n\nNot all events have an associated branch, so a branch-specific hook cannot\nfire for such events. For events that contain a \npull_request\n object, the\nbase branch (target for the pull request) is used, not the head branch.\n\n\nThe payload structure depends on the event type. Please review:\n\n\n    https://developer.github.com/v3/activity/events/types/\n\n\n\n\nDocker Deployment\n\n\nDockerfile\n defines the image, but use the \ndocker-compose.yml\n file instead.\n\n\nTo build, start, and stop:\n\n\ndocker-compose build --no-cache\ndocker-compose up\ndocker-compose down\n\n\n\n\nPorts\n\n\nThis binds to external port 5000. \n\n\nImplementing a secret key is critical to keep \ncaptain hook from deploying random strangers' \nwebhook requests.\n\n\nIn our case, the hook is reverse-proxied by nginx on krash,\nso we know what IP to expect. \n\n\n(Problems implementing IP checking - 172 subrange, not 45 subrange.)\n\n\nMore important than validating the IP is validating the secret.\n\n\nVolumes\n\n\nTHe docker container mounts the \nhooks/\n directory\nin this repository to \n/hooks\n in the container.\n\n\n./hooks:/hooks\n\n\n\n\nNOTE: These scripts must be made executable with \nchmod +x\n\nor the webhook server will not do anything and be totally silent.\n\n\nThe docker container will also mount \n/www/\n into the container,\nso all the static web content on the host (blackbeard) \nis available to the webhooks to perform updates and etc.\n\n\n/www\n is mounted to the same place on the host and in the container:\n\n\n/www:/www\n\n\n\n\nTesting\n\n\nTo test, you can trigger the webhook from the \nrepository's webhooks panel.\n\n\nKeep in mind this will \nonly\n fire triggers\non the master branch.\n\n\nDebugging\n\n\nThis container is an absolute pain in the ass to debug, \nand uses python 2 to boot. \n\n\nBut it was the only thing working.\n\n\nTo test: \n\n\n\n\nRun the server in one window\n\n\nIn a second window, open a shell in the container and monitor \n/tmp/*.log\n\n\nIn a third window, open a shell in the container and monitor \n/www/*\n\n\n\n\nTo open a shell in the container:\n\n\ndocker exec -it <name-of-container> /bin/sh\n\n\n\n\nRemember you only have \n/bin/sh\n and \npython2\n,\nno \nbash\n and no \npython3\n.\n\n\nTo check logs:\n\n\ndocker logs -f <container-name>\n\n\n\n\nYou can also run the container without sending it\nto the background,\n\n\ndocker-compose up\n\n\n\n\nand this will show exceptions on the screen\n(but it won't show anything else useful...)\n\n\nLicense from Forked Repo\n\n\nCopyright (C) 2014-2015 Carlos Jenkins \ncarlos@jenkins.co.cr\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\nCredits\n\n\nThis project is just the reinterpretation and merge of two approaches:\n\n\ngithub-webhook-wrapper\n\n\nflask-github-webhook",
            "title": "Home"
        },
        {
            "location": "/#b-captain-hook",
            "text": "Captain hook is a Python WSGI appication\ntaht handles webhooks from gitea\nand github.  Forked from  carlos-jenkins/python-github-webhooks .  To install:  git clone https://github.com/carlos-jenkins/python-github-webhooks.git\ncd python-github-webhooks",
            "title": "b-captain-hook"
        },
        {
            "location": "/#dependencies",
            "text": "Install dependencies with pip:  sudo pip install -r requirements.txt",
            "title": "Dependencies"
        },
        {
            "location": "/#setup",
            "text": "This requires a config file. See  config.json .  enforce_secret  - require  X-Hub-Signature  in header. Not enforced if empty.  return_scripts_info  - return a JSON with the  stdout ,  stderr  and exit\ncode for each executed hook using the hook name as key. If this option is set\nyou will be able to see the result of your hooks from within your GitHub\nhooks configuration page (see \"Recent Deliveries\").  hooks_path  - Configures a path to import the hooks.  /hooks",
            "title": "Setup"
        },
        {
            "location": "/#adding-hooks",
            "text": "This application will execute scripts in the hooks directory using the\nfollowing order:  (TODO: fix)      hooks/{event}-{name}-{branch}\n    hooks/{event}-{name}\n    hooks/{event}\n    hooks/all  The application will pass to the hooks the path to a JSON file holding the\npayload for the request as first argument. The event type will be passed\nas second argument. For example:      hooks/push-myrepo-master /tmp/sXFHji push  Hooks can be written in any scripting language as long as the file is\nexecutable and has a shebang. A simple example in Python could be:      #!/usr/bin/env python\n    # Python Example for Python GitHub Webhooks\n    # File: push-myrepo-master\n\n    import sys\n    import json\n\n    with open(sys.argv[1], 'r') as jsf:\n      payload = json.loads(jsf.read())\n\n    ### Do something with the payload\n    name = payload['repository']['name']\n    outfile = '/tmp/hook-{}.log'.format(name)\n\n    with open(outfile, 'w') as f:\n        f.write(json.dumps(payload))  Not all events have an associated branch, so a branch-specific hook cannot\nfire for such events. For events that contain a  pull_request  object, the\nbase branch (target for the pull request) is used, not the head branch.  The payload structure depends on the event type. Please review:      https://developer.github.com/v3/activity/events/types/",
            "title": "Adding Hooks"
        },
        {
            "location": "/#docker-deployment",
            "text": "Dockerfile  defines the image, but use the  docker-compose.yml  file instead.  To build, start, and stop:  docker-compose build --no-cache\ndocker-compose up\ndocker-compose down",
            "title": "Docker Deployment"
        },
        {
            "location": "/#ports",
            "text": "This binds to external port 5000.   Implementing a secret key is critical to keep \ncaptain hook from deploying random strangers' \nwebhook requests.  In our case, the hook is reverse-proxied by nginx on krash,\nso we know what IP to expect.   (Problems implementing IP checking - 172 subrange, not 45 subrange.)  More important than validating the IP is validating the secret.",
            "title": "Ports"
        },
        {
            "location": "/#volumes",
            "text": "THe docker container mounts the  hooks/  directory\nin this repository to  /hooks  in the container.  ./hooks:/hooks  NOTE: These scripts must be made executable with  chmod +x \nor the webhook server will not do anything and be totally silent.  The docker container will also mount  /www/  into the container,\nso all the static web content on the host (blackbeard) \nis available to the webhooks to perform updates and etc.  /www  is mounted to the same place on the host and in the container:  /www:/www",
            "title": "Volumes"
        },
        {
            "location": "/#testing",
            "text": "To test, you can trigger the webhook from the \nrepository's webhooks panel.  Keep in mind this will  only  fire triggers\non the master branch.",
            "title": "Testing"
        },
        {
            "location": "/#debugging",
            "text": "This container is an absolute pain in the ass to debug, \nand uses python 2 to boot.   But it was the only thing working.  To test:    Run the server in one window  In a second window, open a shell in the container and monitor  /tmp/*.log  In a third window, open a shell in the container and monitor  /www/*   To open a shell in the container:  docker exec -it <name-of-container> /bin/sh  Remember you only have  /bin/sh  and  python2 ,\nno  bash  and no  python3 .  To check logs:  docker logs -f <container-name>  You can also run the container without sending it\nto the background,  docker-compose up  and this will show exceptions on the screen\n(but it won't show anything else useful...)",
            "title": "Debugging"
        },
        {
            "location": "/#license-from-forked-repo",
            "text": "Copyright (C) 2014-2015 Carlos Jenkins  carlos@jenkins.co.cr  Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.",
            "title": "License from Forked Repo"
        },
        {
            "location": "/#credits",
            "text": "This project is just the reinterpretation and merge of two approaches:  github-webhook-wrapper  flask-github-webhook",
            "title": "Credits"
        }
    ]
}